// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/slysterous/scrapmon/internal/scrapmon (interfaces: ConcurrentDownloader)

// Package scrapmon_mock is a generated GoMock package.
package scrapmon_mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	scrapmon "github.com/slysterous/scrapmon/internal/scrapmon"
)

// MockConcurrentDownloader is a mock of ConcurrentDownloader interface.
type MockConcurrentDownloader struct {
	ctrl     *gomock.Controller
	recorder *MockConcurrentDownloaderMockRecorder
}

// MockConcurrentDownloaderMockRecorder is the mock recorder for MockConcurrentDownloader.
type MockConcurrentDownloaderMockRecorder struct {
	mock *MockConcurrentDownloader
}

// NewMockConcurrentDownloader creates a new mock instance.
func NewMockConcurrentDownloader(ctrl *gomock.Controller) *MockConcurrentDownloader {
	mock := &MockConcurrentDownloader{ctrl: ctrl}
	mock.recorder = &MockConcurrentDownloaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConcurrentDownloader) EXPECT() *MockConcurrentDownloaderMockRecorder {
	return m.recorder
}

// DownloadFiles mocks base method.
func (m *MockConcurrentDownloader) DownloadFiles(arg0 context.Context, arg1 scrapmon.Storage, arg2 <-chan scrapmon.Scrap, arg3 chan<- struct{}) (<-chan scrapmon.ScrapedFile, <-chan error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadFiles", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(<-chan scrapmon.ScrapedFile)
	ret1, _ := ret[1].(<-chan error)
	return ret0, ret1
}

// DownloadFiles indicates an expected call of DownloadFiles.
func (mr *MockConcurrentDownloaderMockRecorder) DownloadFiles(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadFiles", reflect.TypeOf((*MockConcurrentDownloader)(nil).DownloadFiles), arg0, arg1, arg2, arg3)
}

// SaveFiles mocks base method.
func (m *MockConcurrentDownloader) SaveFiles(arg0 scrapmon.Storage, arg1 context.Context, arg2 <-chan scrapmon.ScrapedFile) (<-chan scrapmon.Scrap, <-chan error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveFiles", arg0, arg1, arg2)
	ret0, _ := ret[0].(<-chan scrapmon.Scrap)
	ret1, _ := ret[1].(<-chan error)
	return ret0, ret1
}

// SaveFiles indicates an expected call of SaveFiles.
func (mr *MockConcurrentDownloaderMockRecorder) SaveFiles(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveFiles", reflect.TypeOf((*MockConcurrentDownloader)(nil).SaveFiles), arg0, arg1, arg2)
}
