// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/slysterous/scrapmon/internal/scrapmon (interfaces: DatabaseManager,FileManager,Scrapper,Logger)

// Package scrapmon_mock is a generated GoMock package.
package scrapmon_mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	scrapmon "github.com/slysterous/scrapmon/internal/scrapmon"
)

// MockDatabaseManager is a mock of DatabaseManager interface.
type MockDatabaseManager struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseManagerMockRecorder
}

// MockDatabaseManagerMockRecorder is the mock recorder for MockDatabaseManager.
type MockDatabaseManagerMockRecorder struct {
	mock *MockDatabaseManager
}

// NewMockDatabaseManager creates a new mock instance.
func NewMockDatabaseManager(ctrl *gomock.Controller) *MockDatabaseManager {
	mock := &MockDatabaseManager{ctrl: ctrl}
	mock.recorder = &MockDatabaseManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatabaseManager) EXPECT() *MockDatabaseManagerMockRecorder {
	return m.recorder
}

// CodeAlreadyExists mocks base method.
func (m *MockDatabaseManager) CodeAlreadyExists(arg0 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CodeAlreadyExists", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CodeAlreadyExists indicates an expected call of CodeAlreadyExists.
func (mr *MockDatabaseManagerMockRecorder) CodeAlreadyExists(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CodeAlreadyExists", reflect.TypeOf((*MockDatabaseManager)(nil).CodeAlreadyExists), arg0)
}

// CreateScrap mocks base method.
func (m *MockDatabaseManager) CreateScrap(arg0 scrapmon.Scrap) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateScrap", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateScrap indicates an expected call of CreateScrap.
func (mr *MockDatabaseManagerMockRecorder) CreateScrap(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateScrap", reflect.TypeOf((*MockDatabaseManager)(nil).CreateScrap), arg0)
}

// GetLatestCreatedScrapCode mocks base method.
func (m *MockDatabaseManager) GetLatestCreatedScrapCode() (*string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestCreatedScrapCode")
	ret0, _ := ret[0].(*string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestCreatedScrapCode indicates an expected call of GetLatestCreatedScrapCode.
func (mr *MockDatabaseManagerMockRecorder) GetLatestCreatedScrapCode() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestCreatedScrapCode", reflect.TypeOf((*MockDatabaseManager)(nil).GetLatestCreatedScrapCode))
}

// Purge mocks base method.
func (m *MockDatabaseManager) Purge() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Purge")
	ret0, _ := ret[0].(error)
	return ret0
}

// Purge indicates an expected call of Purge.
func (mr *MockDatabaseManagerMockRecorder) Purge() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Purge", reflect.TypeOf((*MockDatabaseManager)(nil).Purge))
}

// UpdateScrapByCode mocks base method.
func (m *MockDatabaseManager) UpdateScrapByCode(arg0 scrapmon.Scrap) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateScrapByCode", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateScrapByCode indicates an expected call of UpdateScrapByCode.
func (mr *MockDatabaseManagerMockRecorder) UpdateScrapByCode(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateScrapByCode", reflect.TypeOf((*MockDatabaseManager)(nil).UpdateScrapByCode), arg0)
}

// UpdateScrapStatusByCode mocks base method.
func (m *MockDatabaseManager) UpdateScrapStatusByCode(arg0 string, arg1 scrapmon.ScrapStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateScrapStatusByCode", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateScrapStatusByCode indicates an expected call of UpdateScrapStatusByCode.
func (mr *MockDatabaseManagerMockRecorder) UpdateScrapStatusByCode(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateScrapStatusByCode", reflect.TypeOf((*MockDatabaseManager)(nil).UpdateScrapStatusByCode), arg0, arg1)
}

// MockFileManager is a mock of FileManager interface.
type MockFileManager struct {
	ctrl     *gomock.Controller
	recorder *MockFileManagerMockRecorder
}

// MockFileManagerMockRecorder is the mock recorder for MockFileManager.
type MockFileManagerMockRecorder struct {
	mock *MockFileManager
}

// NewMockFileManager creates a new mock instance.
func NewMockFileManager(ctrl *gomock.Controller) *MockFileManager {
	mock := &MockFileManager{ctrl: ctrl}
	mock.recorder = &MockFileManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileManager) EXPECT() *MockFileManagerMockRecorder {
	return m.recorder
}

// Purge mocks base method.
func (m *MockFileManager) Purge() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Purge")
	ret0, _ := ret[0].(error)
	return ret0
}

// Purge indicates an expected call of Purge.
func (mr *MockFileManagerMockRecorder) Purge() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Purge", reflect.TypeOf((*MockFileManager)(nil).Purge))
}

// SaveFile mocks base method.
func (m *MockFileManager) SaveFile(arg0 scrapmon.ScrapedFile) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveFile", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveFile indicates an expected call of SaveFile.
func (mr *MockFileManagerMockRecorder) SaveFile(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveFile", reflect.TypeOf((*MockFileManager)(nil).SaveFile), arg0)
}

// MockScrapper is a mock of Scrapper interface.
type MockScrapper struct {
	ctrl     *gomock.Controller
	recorder *MockScrapperMockRecorder
}

// MockScrapperMockRecorder is the mock recorder for MockScrapper.
type MockScrapperMockRecorder struct {
	mock *MockScrapper
}

// NewMockScrapper creates a new mock instance.
func NewMockScrapper(ctrl *gomock.Controller) *MockScrapper {
	mock := &MockScrapper{ctrl: ctrl}
	mock.recorder = &MockScrapperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockScrapper) EXPECT() *MockScrapperMockRecorder {
	return m.recorder
}

// ScrapeByCode mocks base method.
func (m *MockScrapper) ScrapeByCode(arg0, arg1 string) (scrapmon.ScrapedFile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScrapeByCode", arg0, arg1)
	ret0, _ := ret[0].(scrapmon.ScrapedFile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScrapeByCode indicates an expected call of ScrapeByCode.
func (mr *MockScrapperMockRecorder) ScrapeByCode(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScrapeByCode", reflect.TypeOf((*MockScrapper)(nil).ScrapeByCode), arg0, arg1)
}

// MockLogger is a mock of Logger interface.
type MockLogger struct {
	ctrl     *gomock.Controller
	recorder *MockLoggerMockRecorder
}

// MockLoggerMockRecorder is the mock recorder for MockLogger.
type MockLoggerMockRecorder struct {
	mock *MockLogger
}

// NewMockLogger creates a new mock instance.
func NewMockLogger(ctrl *gomock.Controller) *MockLogger {
	mock := &MockLogger{ctrl: ctrl}
	mock.recorder = &MockLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogger) EXPECT() *MockLoggerMockRecorder {
	return m.recorder
}

// Debugf mocks base method.
func (m *MockLogger) Debugf(arg0 string, arg1 ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Debugf", varargs...)
}

// Debugf indicates an expected call of Debugf.
func (mr *MockLoggerMockRecorder) Debugf(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Debugf", reflect.TypeOf((*MockLogger)(nil).Debugf), varargs...)
}

// Errorf mocks base method.
func (m *MockLogger) Errorf(arg0 string, arg1 ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Errorf", varargs...)
}

// Errorf indicates an expected call of Errorf.
func (mr *MockLoggerMockRecorder) Errorf(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Errorf", reflect.TypeOf((*MockLogger)(nil).Errorf), varargs...)
}

// Info mocks base method.
func (m *MockLogger) Info(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Info", arg0)
}

// Info indicates an expected call of Info.
func (mr *MockLoggerMockRecorder) Info(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockLogger)(nil).Info), arg0)
}

// Infof mocks base method.
func (m *MockLogger) Infof(arg0 string, arg1 ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Infof", varargs...)
}

// Infof indicates an expected call of Infof.
func (mr *MockLoggerMockRecorder) Infof(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Infof", reflect.TypeOf((*MockLogger)(nil).Infof), varargs...)
}

// Warnf mocks base method.
func (m *MockLogger) Warnf(arg0 string, arg1 ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Warnf", varargs...)
}

// Warnf indicates an expected call of Warnf.
func (mr *MockLoggerMockRecorder) Warnf(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Warnf", reflect.TypeOf((*MockLogger)(nil).Warnf), varargs...)
}
